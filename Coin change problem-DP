coin change problem (count the ways)

------------------------------
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class Contest {

    static int count(int coins[], int n, int sum) {
        // 2D dp array where n is the number of coin
        // denominations and sum is the target sum
        int[][] dp = new int[n + 1][sum + 1];

        // Represents the base case where the target sum is 0,
        // and there is only one way to make change: by not
        // selecting any coin
        dp[0][0] = 1;
        for (int i = 1; i <= coins.length; i++) {
            for (int j = 0; j <= sum; j++) {


                // Add the number of ways to make change without
                // using the current coin
                dp[i][j] += dp[i - 1][j];

                if ((j - coins[i - 1]) >= 0) {
                    // Add the number of ways to make change
                    // using the current coin
                    dp[i][j] =dp[i-1][j]+ dp[i][j - coins[i - 1]];
                }

            }
        }
            return dp[n][sum];

        }
        // Driver Function to test above function
        public static void main (String args[])
        {
            
            int coins[] = {1, 2, 3};
            int n = 3;
            int sum = 5;
            System.out.println(count(coins, n, sum));

        }
    }
